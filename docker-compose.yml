services:

  db:
    image: postgres:16.2
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  web:
    build:
      context: .
      dockerfile: image_api/dockerfile
    restart: always
    container_name: web
    command: ["python", "manage.py", "runserver", "0.0.0.0:8000"]
    working_dir: /app/image_api
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=image_api.settings
      - PYTHONPATH=/app
    depends_on:
      db:
        condition: service_healthy

  users:
    tty: true
    build:
      context: .
      dockerfile: ./apps/users/dockerfile
    restart: always
    # container_name: users
    command: ["python", "manage.py", "runserver", "0.0.0.0:8001"]
    working_dir: /app/apps/users
    volumes:
      - .:/app
    ports:
      - "8001:8001"
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=image_api.settings
      - PYTHONPATH=/app
    depends_on:
      db:
        condition: service_healthy

  image_service:
    tty: true
    build:
      context: .
      dockerfile: ./apps/image_service/dockerfile
    # restart: always
    container_name: image_service
    command: ["python", "manage.py", "runserver", "0.0.0.0:8002"]
    working_dir: /app/apps/image_service
    volumes:
      - .:/app
    ports:
      - "8002:8002"
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=image_api.settings
      - PYTHONPATH=/app
    depends_on:
      db:
        condition: service_healthy


volumes:
  postgres_data:
